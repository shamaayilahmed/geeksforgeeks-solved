
// A simple C/C++ program to introduce 
// a linked list 

#include<bits/stdc++.h>
using namespace std;

// Linked List Node
struct Node 
{ 
    int data; // Data
    struct Node *next;  // Pointer
}; 

// This function prints contents of linked list 
// starting from  the given node 
void printList(Node *node) 
{ 
    while (node != NULL) 
    { 
        cout<<node->data<<" "; 
        node = node->next; 
    } 
} 

// Program to create a simple linked 
// list with 3 nodes 
int main() 
{ 
    struct Node* head = NULL; 
    struct Node* second = NULL; 
    struct Node* third = NULL; 
        
    // allocate 3 nodes in the heap 
    head = new Node; 
    second = new Node; 
    third = new Node; 
    
    head->data = 1; //assign data in first node 
    
    // Link first node with the second node
    head->next = second;  
        
    /
    // assign data to second node 
    second->data = 2; 
    
    // Link second node with the third node 
    second->next = third; 
        
    third->data = 3; //assign data to third node 
    third->next = NULL; 
        
    // Print the linked list
    printList(head);
    
    return 0; 
}




/* Given a reference (pointer to pointer) to the head of a list 
   and a position, deletes the node at the given position */
void deleteNode(struct Node **head_ref, int position) 
{ 
   // If linked list is empty 
   if (*head_ref == NULL) 
      return; 
  
   // Store head node 
   struct Node* temp = *head_ref; 
  
    // If head needs to be removed 
    if (position == 0) 
    { 
        *head_ref = temp->next;   // Change head 
        free(temp);               // free old head 
        return; 
    } 
  
    // Find previous node of the node to be deleted 
    for (int i=0; temp!=NULL && i<position-1; i++) 
         temp = temp->next; 
  
    // If position is more than number of ndoes 
    if (temp == NULL || temp->next == NULL) 
         return; 
  
    // Node temp->next is the node to be deleted 
    // Store pointer to the next of node to be deleted 
    struct Node *next = temp->next->next; 
  
    // Unlink the node from linked list 
    free(temp->next);  // Free memory 
  
    temp->next = next;  // Unlink the deleted node from list 
} 



REVERSE


void reverse(Node* head) 
{
    // Initialize current, previous and 
    // next pointers 
    Node *current = head; 
    Node *prev = NULL, *next = NULL
    while (current != NULL) 
    {
        // Store next 
        next = current->next

        // Reverse current node's pointer 
        current->next = prev

        // Move pointers one position ahead. 
        prev = current
        current = next
    }
    head = prev 
}
Two Pointers Solution : We will be using auxiliary two pointers current and next to reverse the links of the linked list. This is little bit tricky solution. Try out with examples-

Pseudo Code
void reverse(Node* head) 
{
